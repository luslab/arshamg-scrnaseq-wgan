includeConfig 'nf-modules/configs/luslab-base.config'

params {
  num_gpus = 1
}

process {
  withName: runGann {
    cpus = { check_max( 8, 'cpus' ) }
    memory = { check_max( 16.GB * task.attempt, 'memory' ) }
    time = { check_max(  24.h, 'time' ) }
    container = 'luslab/tensorflow-gpu:latest'
    queue = 'gpu'

    clusterOptions = "--gres=gpu:" + check_custom_max( params.num_gpus, 'gpus', params.max_gpu_gpus )
    singularity.runOptions = '--nv'
  }
}

def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'gpus') {
    try {
      return Math.min( obj, params.max_gpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max gpus '${params.max_gpus}' is not valid! Using default value: $obj"
      return obj as String
    }
  }
}

def check_custom_max(obj, type, max) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(max as nextflow.util.MemoryUnit) == 1)
        return max as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${max}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(max as nextflow.util.Duration) == 1)
        return max as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${max}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, max as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${max}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'gpus') {
    try {
      return Math.min( obj, max as int )
    } catch (all) {
      println "   ### ERROR ###   Max gpus '${max}' is not valid! Using default value: $obj"
      return obj as String
    }
  }
}